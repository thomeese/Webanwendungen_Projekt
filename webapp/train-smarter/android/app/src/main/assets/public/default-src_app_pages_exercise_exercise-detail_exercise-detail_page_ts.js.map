{"version":3,"file":"default-src_app_pages_exercise_exercise-detail_exercise-detail_page_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;IAQaa,kBAAkB,SAAlBA,kBAAkB;EAU7BC,YAAoBC,iBAApB,EACoBC,iBADpB,EAEoBC,QAFpB,EAGoBC,QAHpB,EAIoBC,KAJpB,EAKoBC,MALpB,EAMoBC,GANpB,EAOoBC,WAPpB,EAQoBC,eARpB,EAQoD;IARhC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAClB,KAAKC,QAAL,GAAgB,EAAhB;IACA,KAAKC,WAAL,GAAmB,IAAnB;IACA,KAAKN,KAAL,CAAWO,WAAX,CAAuBC,SAAvB,CAAiCC,MAAM,IAAG;MACxC,IAAI,KAAKR,MAAL,CAAYS,oBAAZ,OAAuC,IAA3C,EAAiD;QAC/CC,OAAO,CAACC,GAAR,CAAY,eAAZ;QACAD,OAAO,CAACC,GAAR,CAAY,KAAKX,MAAL,CAAYS,oBAAZ,EAAZ;;QACA,IAAI,KAAKT,MAAL,CAAYS,oBAAZ,GAAmCG,MAAnC,CAA0CC,KAA9C,EAAqD;UACnD,KAAKC,cAAL,GAAsB,KAAKd,MAAL,CAAYS,oBAAZ,GAAmCG,MAAnC,CAA0CC,KAA1C,CAAgDC,cAAtE;QACD;MACF;IACF,CARD;EASD;;EAEDC,MAAM;IACJ,KAAKC,oBAAL;IACA,KAAKX,WAAL,GAAmB,IAAnB;EACD;;EAEDY,SAAS;IACP,KAAKZ,WAAL,GAAmB,KAAnB;IACA,KAAKW,oBAAL;EACD;;EAEDA,oBAAoB;IAClB,KAAKE,OAAL,GAAe,KAAKA,OAAL,GAAe,KAAKhB,WAAL,CAAiBiB,KAAjB,CAAuB;MACnDC,SAAS,EAAE,IAAI7B,uDAAJ,CAAgB,GAAG,KAAKa,QAAL,CAAciB,MAAd,GAAuB,CAAC,EAA3C,EAA+C,EAA/C,CADwC;MAEnDC,UAAU,EAAE,IAAI/B,uDAAJ,CAAgB,EAAhB,EAAoB,CAACC,+DAAD,EAAsBA,8DAAA,CAAmB,UAAnB,CAAtB,CAApB,CAFuC;MAGnDiC,MAAM,EAAE,IAAIlC,uDAAJ,CAAgB,EAAhB,EAAoB,EAApB;IAH2C,CAAvB,CAA9B;EAKD;;EAEDmC,MAAM;IACJ,MAAMC,IAAI,GAAG,KAAKT,OAAL,CAAaU,WAAb,EAAb;IACA,KAAKxB,QAAL,CAAcyB,IAAd,CAAmB;MACjBT,SAAS,EAAEO,IAAI,CAACP,SADC;MAEjBE,UAAU,EAAEK,IAAI,CAACL,UAFA;MAGjBG,MAAM,EAAEE,IAAI,CAACF;IAHI,CAAnB;IAKA,KAAKR,SAAL;EACD;;EAEDa,QAAQ;IACN,IAAI;MACF,KAAKd,oBAAL;MACA,MAAMe,KAAK,GAAG,KAAKhC,KAAL,CAAWiC,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,IAAjC,CAAd;;MACA,IAAIH,KAAK,KAAK,WAAV,IAAyBA,KAAK,KAAK,IAAvC,EAA6C;QAC3C,KAAKI,EAAL,GAAUJ,KAAV;MACD;;MACDrB,OAAO,CAACC,GAAR,CAAY,sBAAsB,KAAKG,cAAvC;;MACA,IAAI,KAAKA,cAAT,EAAyB;QACvB,KAAKhB,QAAL,CAAcsC,oBAAd,CAAmC,KAAKtB,cAAxC,EAAwDP,SAAxD,CAAkE8B,GAAG,IAAG;UACtE,KAAKC,YAAL,GAAoBD,GAApB;UACA3B,OAAO,CAACC,GAAR,CAAY,KAAK2B,YAAjB;QACD,CAHD;MAID;IACF,CAbD,CAaE,OAAOC,KAAP,EAAc;MACd7B,OAAO,CAACC,GAAR,CAAY4B,KAAZ;IACD;;IACD,KAAKC,WAAL;EACD;;EAEKC,iBAAiB;IAAA;;IAAA;MACrB/B,OAAO,CAACC,GAAR,CAAY,QAAZ;MACA,IAAI+B,KAAJ;MACAA,KAAK,GAAG,KAAI,CAACJ,YAAL,CAAkBK,SAA1B;MACAjC,OAAO,CAACC,GAAR,CAAY+B,KAAZ;;MACA,IAAI,CAACA,KAAL,EAAY;QACVA,KAAK,GAAG,EAAR;MACD;;MACDhC,OAAO,CAACC,GAAR,CAAY,aAAZ;MACAD,OAAO,CAACC,GAAR,CAAY,KAAI,CAACwB,EAAjB;MACAO,KAAK,CAACb,IAAN,CAAW;QACTe,UAAU,EAAE,KAAI,CAACT,EADR;QAETU,IAAI,EAAE,KAAI,CAACC,QAAL,CAAcD,IAFX;QAGTE,IAAI,EAAE,KAAI,CAAC3C;MAHF,CAAX;MAKA,MAAM4C,UAAU,GAAG;QACjBb,EAAE,EAAE,KAAI,CAACG,YAAL,CAAkBxB,cADL;QAEjB+B,IAAI,EAAE,KAAI,CAACP,YAAL,CAAkBO,IAFP;QAGjBI,WAAW,EAAE,KAAI,CAACX,YAAL,CAAkBW,WAHd;QAIjBC,MAAM,EAAE,KAAI,CAACZ,YAAL,CAAkBY,MAJT;QAKjBC,GAAG,EAAE,KAAI,CAACb,YAAL,CAAkBa,GALN;QAMjBR,SAAS,EAAED;MANM,CAAnB;MAQA,MAAM,KAAI,CAAC5C,QAAL,CAAcsD,kBAAd,CAAiCJ,UAAjC,CAAN;MACAtC,OAAO,CAACC,GAAR,CAAY,sCAAZ;MACA,MAAM,KAAI,CAACR,eAAL,CAAqBkD,OAArB,EAAN;IAzBqB;EA0BtB;;EAGKb,WAAW;IAAA;;IAAA;MACf,MAAM,MAAI,CAAC1C,QAAL,CAAcwD,sBAAd,CAAqC,MAAI,CAACnB,EAA1C,EAA8C5B,SAA9C,CAAwDgD,MAAM,IAAG;QACrE,MAAI,CAACT,QAAL,GAAgBS,MAAM,CAAC,CAAD,CAAtB;QACA7C,OAAO,CAACC,GAAR,CAAY,MAAI,CAACmC,QAAjB;MACD,CAHK,CAAN;IADe;EAKhB;;AAlH4B;;;QAfvBhE,4EAAiBA;;QAGjBG,6DAAiBA;;QACjBG,qDAAQA;;QACRC,uEAAeA;;QAJfN,2DAAcA;;QAAEC,mDAAMA;;QAEcG,yDAAaA;;QAIjDG,uDAAWA;;QAJQJ,2DAAeA;;;;;UAcvCL,gDAAKA;;;AAFKY,kBAAkB,uDAN9Bb,wDAAS,CAAC;EACT4E,QAAQ,EAAE,qBADD;EAETC,UAAAA,kEAFS;;AAAA,CAAD,CAMqB,CAD/B;AAC+B,GAAlBhE,kBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;AChBmC;AAYf;AAG8B;AAE/D,IAAK,WAUJ;AAVD,WAAK,WAAW;IACd,qCAAsB;IACtB,iCAAkB;IAClB,qCAAsB;IACtB,6CAA8B;IAC9B,yCAA0B;IAC1B,uCAAwB;IACxB,+CAAgC;IAChC,uCAAwB;IACxB,+CAAgC;AAClC,CAAC,EAVI,WAAW,KAAX,WAAW,QAUf;IAoCY,eAAe,SAAf,eAAe;IAE1B,YAAoB,SAAoB,EACpB,WAAkC;QADlC,cAAS,GAAT,SAAS,CAAW;QACpB,gBAAW,GAAX,WAAW,CAAuB;IACtD,CAAC;IAED,WAAW;QACT,MAAM,OAAO,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QACvD,OAAO,uEAAc,CAAC,OAAO,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAC,CAA4B,CAAC;IACjF,CAAC;IAED,eAAe,CAAC,EAAU;QACxB,MAAM,UAAU,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;QACzD,OAAO,gEAAO,CAAC,UAAU,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAC,CAAyB,CAAC;IAC1E,CAAC;IAED,OAAO,CAAC,IAAc;QACpB,MAAM,OAAO,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QACvD,OAAO,+DAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,UAAU,CAAC,IAAc;QACvB,MAAM,UAAU,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QACjE,OAAO,kEAAS,CAAC,UAAU,EAAE;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO;YAChD,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK;SAC9D,CAAC,CAAC;IACL,CAAC;IAED,UAAU,CAAC,IAAc;QACvB,MAAM,UAAU,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QACjE,OAAO,kEAAS,CAAC,UAAU,CAAC,CAAC;IAC/B,CAAC;IAED,eAAe,CAAC,IAAS;QACvB,MAAM,eAAe,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QACnE,OAAO,+DAAM,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,kBAAkB,CAAC,IAAS;QAC1B,MAAM,kBAAkB,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC1E,OAAO,kEAAS,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,kBAAkB,CAAC,IAAS;QAC1B,MAAM,kBAAkB,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC1E,OAAO,kEAAS,CAAC,kBAAkB,CAAC,CAAC;IACvC,CAAC;IAED,gBAAgB;QACd,MAAM,eAAe,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QACnE,OAAO,uEAAc,CAAC,eAAe,EAAE,EAAC,OAAO,EAAE,gBAAgB,EAAC,CAAuB,CAAC;IAC5F,CAAC;IAED,oBAAoB,CAAC,EAAU;QAC7B,MAAM,eAAe,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;QAClE,OAAO,gEAAO,CAAC,eAAe,EAAE,EAAC,OAAO,EAAE,gBAAgB,EAAC,CAAoB,CAAC;IAClF,CAAC;IAED,oBAAoB;QAClB,MAAM,eAAe,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QACnE,MAAM,UAAU,GAAG,8DAAK,CAAC,eAAe,EAAE,8DAAK,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QAC5F,OAAO,uEAAc,CAAC,UAAU,EAAE,EAAC,OAAO,EAAE,gBAAgB,EAAC,CAAC,CAAC;IACjE,CAAC;IAED,WAAW,CAAC,QAAmB;QAC7B,MAAM,WAAW,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC5D,OAAO,+DAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED,eAAe;QACb,MAAM,WAAW,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC5D,OAAO,uEAAc,CAAC,WAAW,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,CAA4B,CAAC;IACzF,CAAC;IAED,oBAAoB,CAAC,IAAI,EAAE,MAAO;QAChC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,WAAW,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC5D,IAAI,IAAI,KAAK,eAAe,EAAE;YAC5B,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;SAC/B;QACD,IAAI,IAAI,KAAK,UAAU,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACxB,MAAM,aAAa,GAAG,8DAAK,CAAC,WAAW,EAAE,8DAAK,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;YAC1E,OAAO,uEAAc,CAAC,aAAa,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,CAA6B,CAAC;SAC3F;QACD,IAAI,IAAI,KAAK,cAAc,EAAE;YAC3B,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YACtC,MAAM,aAAa,GAAG,8DAAK,CAAC,WAAW,EAAE,8DAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;YACxE,OAAO,uEAAc,CAAC,aAAa,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,CAA6B,CAAC;SAC3F;QACD,IAAI,IAAI,KAAK,WAAW,EAAE;YACxB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACnC,MAAM,aAAa,GAAG,8DAAK,CAAC,WAAW,EAAE,8DAAK,CAAC,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3E,OAAO,uEAAc,CAAC,aAAa,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,CAA6B,CAAC;SAC3F;IACH,CAAC;IAED,eAAe,CAAC,EAAU;QACxB,MAAM,WAAW,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,EAAE,EAAE,CAAC,CAAC;QAC3D,OAAO,gEAAO,CAAC,WAAW,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,CAA0B,CAAC;IAChF,CAAC;IAED,sBAAsB,CAAC,EAAU;QAC/B,MAAM,WAAW,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC5D,MAAM,aAAa,GAAG,8DAAK,CAAC,WAAW,EAAE,8DAAK,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACvE,OAAO,uEAAc,CAAC,aAAa,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,CAA6B,CAAC;IAC5F,CAAC;IAED,cAAc,CAAC,QAAmB;QAChC,MAAM,cAAc,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QAC/E,OAAO,kEAAS,CAAC,cAAc,EAAE;YAC/B,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAChD,SAAS,EAAE,QAAQ,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM;SAChF,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,QAAmB;QAChC,MAAM,cAAc,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QAC/E,OAAO,kEAAS,CAAC,cAAc,CAAC,CAAC;IACnC,CAAC;IAED,aAAa,CAAC,UAAsB;QAClC,MAAM,aAAa,GAAG,mEAAU,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAC/D,OAAO,+DAAM,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;IAC3C,CAAC;IAED,gBAAgB,CAAC,UAAsB;QACrC,MAAM,gBAAgB,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,OAAO,kEAAS,CAAC,gBAAgB,EAAE;YACjC,UAAU,EAAE,UAAU,CAAC,WAAW,EAAE,cAAc,EAAE,UAAU,CAAC,cAAc;YAC7E,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,CAAC,GAAG;YACrE,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,QAAQ;SAC1D,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB,CAAC,UAAsB;QACrC,MAAM,gBAAgB,GAAG,4DAAG,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,OAAO,kEAAS,CAAC,gBAAgB,CAAC,CAAC;IACrC,CAAC;CACF;;YAtMC,8DAAS;YAOH,0EAAqB;;AAgDhB,eAAe;IAJ3B,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GAEW,eAAe,CA+I3B;AA/I2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/De;AACkB;AACZ;AAGjD,eAAe;AACf,IAAY,mBAMX;AAND,WAAY,mBAAmB;IAC7B,sDAA+B;IAC/B,wDAA4B;IAC5B,yDAAkC;IAClC,0DAA8B;IAC9B,mDAA4B;AAC9B,CAAC,EANW,mBAAmB,KAAnB,mBAAmB,QAM9B;AACD,IAAY,WAUX;AAVD,WAAY,WAAW;IACrB,qCAAsB;IACtB,iCAAkB;IAClB,qCAAsB;IACtB,6CAA8B;IAC9B,yCAA0B;IAC1B,uCAAwB;IACxB,+CAAgC;IAChC,uCAAwB;IACxB,+CAAgC;AAClC,CAAC,EAVW,WAAW,KAAX,WAAW,QAUtB;AAED,IAAY,eAoBX;AApBD,WAAY,eAAe;IACzB,2CAAwB;IACxB,uCAAoB;IACpB,2CAAwB;IACxB,oCAAiB;IACjB,mCAAgB;IAChB,yDAAsC;IACtC,mCAAgB;IAChB,wCAAqB;IACrB,qCAAkB;IAClB,wDAAqC;IACrC,sCAAmB;IACnB,2DAAmC;IACnC,6CAA0B;IAC1B,kCAAe;IACf,gEAAwC;IACxC,6CAAqB;IACrB,yCAAsB;IACtB,sCAAmB;IACnB,mDAA2B;AAC7B,CAAC,EApBW,eAAe,KAAf,eAAe,QAoB1B;AAED,IAAY,OAoBX;AApBD,WAAY,OAAO;IACjB,kCAAuB;IACvB,sBAAW;IACX,kCAAuB;IACvB,4BAAiB;IACjB,4BAAiB;IACjB,yDAA8C;IAC9C,0BAAe;IACf,gCAAqB;IACrB,4BAAiB;IACjB,oCAAyB;IACzB,wBAAa;IACb,+CAAoC;IACpC,kCAAuB;IACvB,0BAAe;IACf,iDAAsC;IACtC,0BAAe;IACf,0BAAe;IACf,8BAAmB;IACnB,mCAAwB;AAC1B,CAAC,EApBW,OAAO,KAAP,OAAO,QAoBlB;AAED,IAAY,iBAWX;AAXD,WAAY,iBAAiB;IAC3B,yCAAe;IACf,sCAAiB;IACjB,oCAAe;IACf,2CAAsB;IACtB,+CAA0B;IAC1B,oCAAe;IACf,4CAAuB;IACvB,6CAAwB;IACxB,+CAA0B;IAC1B,qCAAgB;AAClB,CAAC,EAXW,iBAAiB,KAAjB,iBAAiB,QAW5B;AAED,IAAY,SAWX;AAXD,WAAY,SAAS;IACnB,0BAAa;IACb,8BAAiB;IACjB,4BAAe;IACf,qCAAwB;IACxB,qCAAwB;IACxB,0BAAa;IACb,oCAAuB;IACvB,qCAAwB;IACxB,qCAAwB;IACxB,4BAAe;AACjB,CAAC,EAXW,SAAS,KAAT,SAAS,QAWpB;AAED,IAAY,iBA6BX;AA7BD,WAAY,iBAAiB;IAC3B,kDAAwB;IACxB,kCAAa;IACb,2CAAsB;IACtB,+CAAyB;IACzB,0CAAoB;IACpB,oCAAe;IACf,4CAAuB;IACvB,+DAA0C;IAC1C,2CAAsB;IACtB,sCAAiB;IACjB,8CAAyB;IACzB,sDAAiC;IACjC,iDAA4B;IAC5B,4DAAuC;IACvC,uDAAkC;IAClC,qCAAgB;IAChB,kCAAa;IACb,sDAAiC;IACjC,kDAA6B;IAC7B,iDAA4B;IAC5B,2DAAiC;IACjC,+CAA0B;IAC1B,0DAAqC;IACrC,oCAAe;IACf,yCAAoB;IACpB,sEAA4C;IAC5C,2CAAsB;IACtB,8CAAyB;AAC3B,CAAC,EA7BW,iBAAiB,KAAjB,iBAAiB,QA6B5B;AAED,IAAY,SA6BV;AA7BF,WAAY,SAAS;IACnB,kCAAqB;IACrB,0BAAa;IACb,gCAAmB;IACnB,uCAAyB;IACzB,mCAAqB;IACrB,4BAAe;IACf,kCAAqB;IACrB,qDAAwC;IACxC,oCAAuB;IACvB,8BAAiB;IACjB,sCAAyB;IACzB,iDAAoC;IACpC,2CAA8B;IAC9B,8CAAiC;IACjC,+CAAkC;IAClC,8BAAiB;IACjB,0BAAa;IACb,6CAAgC;IAChC,yCAA4B;IAC5B,2CAA8B;IAC9B,6CAAgC;IAChC,+CAAkC;IAClC,iDAAoC;IACpC,0BAAa;IACb,iCAAoB;IACpB,yDAA4C;IAC5C,kCAAqB;IACrB,yCAA4B;AAC7B,CAAC,EA7BU,SAAS,KAAT,SAAS,QA6BnB;IAeW,iBAAiB,SAAjB,iBAAiB;IAM5B,YAAoB,IAAgB,EAAU,UAA6B;QAAvD,SAAI,GAAJ,IAAI,CAAY;QAAU,eAAU,GAAV,UAAU,CAAmB;QAL3E,QAAG,GAAG,6CAA6C,CAAC;QACpD,YAAO,GAAG,IAAI,6DAAW,CAAC;YACxB,gBAAgB,EAAE,oDAAoD;YACtE,iBAAiB,EAAE,2BAA2B;SAC/C,CAAC,CAAC;IAC2E,CAAC;IAE/E,OAAO,CAAC,IAAI,EAAE,MAAO;QACnB,IAAG,OAAO,MAAM,KAAK,WAAW,EAAE;YAChC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;SACvF;QACC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,MAAM,EAAE,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;IAClG,CAAC;IACH,eAAe,CAAC,EAAE;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,GAAG,aAAa,EAAE,EAAE,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;IACnF,CAAC;CACF;;YA1LO,4DAAU;YACV,6DAAiB;;AAwKZ,iBAAiB;IAH7B,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,iBAAiB,CAiB7B;AAjB6B","sources":["./src/app/pages/exercise/exercise-detail/exercise-detail.page.ts","./src/app/services/database.service.ts","./src/app/services/exercise-db.service.ts"],"sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport {ExerciseDBService} from '../../../services/exercise-db.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {trigger, transition, animate, style, state} from '@angular/animations';\nimport {LoadingController, ModalController, NavController} from '@ionic/angular';\nimport {Location} from '@angular/common';\nimport {DatabaseService} from '../../../services/database.service';\nimport {waitForAsync} from '@angular/core/testing';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-exercise-detail',\n  templateUrl: './exercise-detail.page.html',\n  styleUrls: ['./exercise-detail.page.scss'],\n})\n//getExercise momentan nicht eingebunden\nexport class ExerciseDetailPage implements OnInit {\n\n  @Input() id;\n  exercise;\n  trainingPlanId;\n  trainingPlan;\n  setArray;\n  setForm: FormGroup;\n  displayForm;\n\n  constructor(private exerciseDBService: ExerciseDBService,\n              private loadingController: LoadingController,\n              private location: Location,\n              private database: DatabaseService,\n              private route: ActivatedRoute,\n              private router: Router,\n              private nav: NavController,\n              private formbuilder: FormBuilder,\n              private modalController: ModalController) {\n    this.setArray = [];\n    this.displayForm = true;\n    this.route.queryParams.subscribe(params => {\n      if (this.router.getCurrentNavigation() !== null) {\n        console.log('Navigation on');\n        console.log(this.router.getCurrentNavigation());\n        if (this.router.getCurrentNavigation().extras.state) {\n          this.trainingPlanId = this.router.getCurrentNavigation().extras.state.trainingPlanId;\n        }\n      }\n    });\n  }\n\n  newSet() {\n    this.generateSetFormgroup();\n    this.displayForm = true;\n  }\n\n  abbortSet() {\n    this.displayForm = false;\n    this.generateSetFormgroup();\n  }\n\n  generateSetFormgroup() {\n    this.setForm = this.setForm = this.formbuilder.group({\n      setnumber: new FormControl(`${this.setArray.length + 1}`, []),\n      repetition: new FormControl('', [Validators.required, Validators.pattern('[0-9]{2}')]),\n      weight: new FormControl('', [])\n    });\n  }\n\n  addSet() {\n    const data = this.setForm.getRawValue();\n    this.setArray.push({\n      setnumber: data.setnumber,\n      repetition: data.repetition,\n      weight: data.weight\n    });\n    this.abbortSet();\n  }\n\n  ngOnInit() {\n    try {\n      this.generateSetFormgroup();\n      const idTmp = this.route.snapshot.paramMap.get('id');\n      if (idTmp !== 'undefined' && idTmp !== null) {\n        this.id = idTmp;\n      }\n      console.log('trainingsPlanId: ' + this.trainingPlanId);\n      if (this.trainingPlanId) {\n        this.database.getTrainingsPlanById(this.trainingPlanId).subscribe(res => {\n          this.trainingPlan = res;\n          console.log(this.trainingPlan);\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    this.getExercise();\n  }\n\n  async addToTrainingPlan() {\n    console.log('Vorher');\n    let array;\n    array = this.trainingPlan.exercises;\n    console.log(array);\n    if (!array) {\n      array = [];\n    }\n    console.log('Mitten drin');\n    console.log(this.id);\n    array.push({\n      exerciseId: this.id,\n      name: this.exercise.name,\n      sets: this.setArray\n    });\n    const updatePlan = {\n      id: this.trainingPlan.trainingPlanId,\n      name: this.trainingPlan.name,\n      description: this.trainingPlan.description,\n      period: this.trainingPlan.period,\n      uid: this.trainingPlan.uid,\n      exercises: array\n    };\n    await this.database.updateTrainingPlan(updatePlan);\n    console.log('Button hinzufuegen zum Trainingsplan');\n    await this.modalController.dismiss();\n  }\n\n\n  async getExercise() {\n    await this.database.getExerciseByNumericId(this.id).subscribe(result => {\n      this.exercise = result[0];\n      console.log(this.exercise);\n    });\n  }\n}\n","import {Injectable, Query} from '@angular/core';\nimport {\n  addDoc,\n  collection,\n  collectionData,\n  deleteDoc,\n  doc,\n  docData,\n  Firestore,\n  updateDoc,\n  where,\n  query, collectionGroup\n} from '@angular/fire/firestore';\nimport {Observable} from 'rxjs';\nimport {traceUntilFirst} from '@angular/fire/performance';\nimport {AuthenticationService} from './authentication.service';\n\nenum SearchTypes {\n  exercise = '/exercise',\n  exercisesList = '',\n  bodyPart = '/bodyPart',\n  bodyPartList = '/bodyPartList',\n  exerciseByID = '/exercise',\n  targetMuscle = '/target',\n  targetMuscleList = '/targetList',\n  equipment = '/equipment',\n  equipmentList = '/equipmentList'\n}\n\nexport interface UserData {\n  docId?: string;\n  uid: string;\n  firstname: string;\n  surname: string;\n  birthdate: string;\n  size: number;\n  email: string;\n}\n\nexport interface Excersise {\n  exerciseId?: string;\n  name: string;\n  bodypart: string;\n  equipment: string;\n  gifUrl: string;\n  target: string;\n}\n\nexport interface SetLogging {\n  id?: string;\n  excercizeId: string;\n  trainingPlanId: string;\n  userId: string;\n  date: string;\n  set: number;\n  weight: number;\n  repition: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DatabaseService {\n\n  constructor(private firestore: Firestore,\n              private authService: AuthenticationService) {\n  }\n\n  getUserData(): Observable<UserData[]> {\n    const userRef = collection(this.firestore, 'userData');\n    return collectionData(userRef, {idField: 'userId'}) as Observable<UserData []>;\n  }\n\n  getUserDataById(id: string): Observable<UserData> {\n    const userDocRef = doc(this.firestore, `userData/${id}`);\n    return docData(userDocRef, {idField: 'userId'}) as Observable<UserData>;\n  }\n\n  addUser(user: UserData) {\n    const userRef = collection(this.firestore, 'userData');\n    return addDoc(userRef, user);\n  }\n\n  updateUser(user: UserData) {\n    const userDocRef = doc(this.firestore, `userData/${user.docId}`);\n    return updateDoc(userDocRef, {\n      firstname: user.firstname, surname: user.surname,\n      birthdate: user.birthdate, size: user.size, email: user.email\n    });\n  }\n\n  deleteUser(user: UserData) {\n    const userDocRef = doc(this.firestore, `userData/${user.docId}`);\n    return deleteDoc(userDocRef);\n  }\n\n  addTrainingPlan(plan: any) {\n    const trainingPlanRef = collection(this.firestore, 'trainingPlan');\n    return addDoc(trainingPlanRef, plan);\n  }\n\n  updateTrainingPlan(plan: any) {\n    const trainingPlanDocRef = doc(this.firestore, `trainingPlan/${plan.id}`);\n    return updateDoc(trainingPlanDocRef, plan);\n  }\n\n  deleteTrainingPlan(plan: any) {\n    const trainingPlanDocRef = doc(this.firestore, `trainingPlan/${plan.id}`);\n    return deleteDoc(trainingPlanDocRef);\n  }\n\n  getTrainingsPlan(): Observable<any[]> {\n    const trainingPlanRef = collection(this.firestore, 'trainingPlan');\n    return collectionData(trainingPlanRef, {idField: 'trainingPlanId'}) as Observable<any []>;\n  }\n\n  getTrainingsPlanById(id: string): Observable<any> {\n    const trainingPlanRef = doc(this.firestore, `trainingPlan/${id}`);\n    return docData(trainingPlanRef, {idField: 'trainingPlanId'}) as Observable<any>;\n  }\n\n  getUserTrainingsPlan() {\n    const trainingPlanRef = collection(this.firestore, 'trainingPlan');\n    const trainQuery = query(trainingPlanRef, where('uid', '==', this.authService.getUserId()));\n    return collectionData(trainQuery, {idField: 'trainingPlanId'});\n  }\n\n  addExercise(exercise: Excersise) {\n    const exerciseRef = collection(this.firestore, 'exercises');\n    return addDoc(exerciseRef, exercise);\n  }\n\n  getAllExercises(): Observable<Excersise[]> {\n    const exerciseRef = collection(this.firestore, 'exercises');\n    return collectionData(exerciseRef, {idField: 'exerciseId'}) as Observable<Excersise[]>;\n  }\n\n  getExercisesBySearch(type, target?): Observable<Excersise[]> {\n    console.log('Hello');\n    console.log(type);\n    console.log(SearchTypes.bodyPart);\n    const exerciseRef = collection(this.firestore, 'exercises');\n    if (type === 'exercisesList') {\n      console.log(SearchTypes.exercisesList);\n      return this.getAllExercises();\n    }\n    if (type === 'bodyPart') {\n      console.log('bodypart');\n      const exerciseQuary = query(exerciseRef, where('bodypart', '==', target));\n      return collectionData(exerciseQuary, {idField: 'exerciseId'}) as Observable<Excersise []>;\n    }\n    if (type === 'targetMuscle') {\n      console.log(SearchTypes.targetMuscle);\n      const exerciseQuary = query(exerciseRef, where('target', '==', target));\n      return collectionData(exerciseQuary, {idField: 'exerciseId'}) as Observable<Excersise []>;\n    }\n    if (type === 'equipment') {\n      console.log(SearchTypes.equipment);\n      const exerciseQuary = query(exerciseRef, where('equipment', '==', target));\n      return collectionData(exerciseQuary, {idField: 'exerciseId'}) as Observable<Excersise []>;\n    }\n  }\n\n  getExerciseById(id: string): Observable<Excersise> {\n    const exerciseRef = doc(this.firestore, `exercises/${id}`);\n    return docData(exerciseRef, {idField: 'exerciseId'}) as Observable<Excersise>;\n  }\n\n  getExerciseByNumericId(id: string) {\n    const exerciseRef = collection(this.firestore, 'exercises');\n    const exerciseQuary = query(exerciseRef, where('numericId', '==', id));\n    return collectionData(exerciseQuary, {idField: 'exerciseId'}) as Observable<Excersise []>;\n  }\n\n  updateExercise(exercise: Excersise) {\n    const exerciseDocRef = doc(this.firestore, `exercises/${exercise.exerciseId}`);\n    return updateDoc(exerciseDocRef, {\n      name: exercise.name, bodypart: exercise.bodypart,\n      equipment: exercise.equipment, gifUrl: exercise.gifUrl, target: exercise.target\n    });\n  }\n\n  deleteExercise(exercise: Excersise) {\n    const exerciseDocRef = doc(this.firestore, `exercises/${exercise.exerciseId}`);\n    return deleteDoc(exerciseDocRef);\n  }\n\n  addSetLogging(setLogging: SetLogging) {\n    const setLoggingRef = collection(this.firestore, 'setLogging');\n    return addDoc(setLoggingRef, setLogging);\n  }\n\n  updateSetLogging(setLogging: SetLogging) {\n    const setLoggingDocRef = doc(this.firestore, `setLogging/${setLogging.id}`);\n    return updateDoc(setLoggingDocRef, {\n      exerciseId: setLogging.excercizeId, trainingPlanId: setLogging.trainingPlanId,\n      userId: setLogging.userId, date: setLogging.date, set: setLogging.set,\n      weight: setLogging.weight, repetiton: setLogging.repition\n    });\n  }\n\n  deleteSetLogging(setLogging: SetLogging) {\n    const setLoggingDocRef = doc(this.firestore, `setLogging/${setLogging.id}`);\n    return deleteDoc(setLoggingDocRef);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {LoadingController} from '@ionic/angular';\nimport {Observable} from 'rxjs';\n\n//Exercise Enum\nexport enum SearchTypesToString {\n  exercisesList = 'Alle Uebungen',\n  bodyPart = 'Nach Körperteil',\n  targetMuscle = 'Nach Muskelgruppe',\n  exerciseByID = 'Nach ÜbungsID',\n  equipment = 'Nach Equipment'\n}\nexport enum SearchTypes {\n  exercise = '/exercise',\n  exercisesList = '',\n  bodyPart = '/bodyPart',\n  bodyPartList = '/bodyPartList',\n  exerciseByID = '/exercise',\n  targetMuscle = '/target',\n  targetMuscleList = '/targetList',\n  equipment = '/equipment',\n  equipmentList = '/equipmentList'\n}\n\nexport enum MusclesToString {\n  abductors = 'Abduktoren',\n  abs = 'Bauchmuskeln',\n  adductors = 'Adduktoren',\n  biceps = 'Biceps',\n  calves = 'Waden',\n  cardiovascularSystem = 'Blutkreislauf',\n  delts = 'Deltas',\n  forearms = 'Unterarm',\n  glutes = 'Gluteus',\n  hamstrings = 'Oberschenkelmuskulatur',\n  lats = 'Latissimus',\n  levatorScapulae = 'Schulterblätter',\n  pectorals = 'Brustmuskeln',\n  quads = 'Quads',\n  serratusAnterior = 'vorderer Sägemuskel',\n  spine = 'Wirbelsäule',\n  traps = 'Trapezmuskel',\n  triceps = 'Triceps',\n  upperBack = 'Oberer Rücken'\n}\n\nexport enum Muscles {\n  abductors = 'abductors',\n  abs = 'abs',\n  adductors = 'adductors',\n  biceps = 'biceps',\n  calves = 'calves',\n  cardiovascularSystem = 'cardiovascular system',\n  delts = 'delts',\n  forearms = 'forearms',\n  glutes = 'glutes',\n  hamstrings = 'hamstrings',\n  lats = 'lats',\n  levatorScapulae = 'levator scapulae',\n  pectorals = 'pectorals',\n  quads = 'quads',\n  serratusAnterior = 'serratus anterior',\n  spine = 'spine',\n  traps = 'traps',\n  triceps = 'triceps',\n  upperBack = 'upper back'\n}\n\nexport enum BodyPartsToString {\n  back = 'Rücken',\n  cardio = 'Cardio',\n  chest = 'Brust',\n  lowerArms = 'Unterarm',\n  lowerLegs = 'Untere Beine',\n  neck = 'Nacken',\n  shoulders = 'Schultern',\n  upperArms = 'Obere Arme',\n  upperLegs = 'Oberer Beine',\n  waist = 'Taille'\n}\n\nexport enum BodyParts {\n  back = 'back',\n  cardio = 'cardio',\n  chest = 'chest',\n  lowerArms = 'lower arms',\n  lowerLegs = 'lower legs',\n  neck = 'neck',\n  shoulders = 'shoulders',\n  upperArms = 'upper arms',\n  upperLegs = 'upper legs',\n  waist = 'waist'\n}\n\nexport enum EquipmentToString {\n  assisted = 'unterstützt',\n  band = 'Band',\n  barbell = 'Langhantel',\n  bodyWeight ='body weight',\n  bosuBall ='BosuBall',\n  cable = 'Kabel',\n  dumbbell = 'Kurzhantel',\n  ellipticalMachine = 'elliptische Maschine',\n  ezBarbel = 'EZ Hantel',\n  hammer = 'Hammer',\n  kettlebell = 'Kettlebell',\n  leverageMachine = 'Hebelmaschine',\n  medicineBall = 'Medizinball',\n  olympicBarbel = 'olympische Langhantel',\n  resistanceBand = 'Widerstandsband',\n  roller = 'Rolle',\n  rope = 'Seil',\n  skiergMachine = 'SkiErg Maschine',\n  sledMachine = 'Sled Maschine',\n  smithMachine = 'Multipresse',\n  stabilityBall = 'Stabilitätsball',\n  stationaryBike = 'Fahrrad',\n  stepmillMachine = 'Stepmill Maschine',\n  tire = 'Reifen',\n  trapBar = 'Trap Bar',\n  upperBodyEergometer = 'Oberkörper-Ergometer',\n  weighted = 'gewichtet',\n  wheelRoller = 'AB Roller'\n}\n\nexport enum Equipment {\n  assisted = 'assisted',\n  band = 'band',\n  barbell = 'barbell',\n  bodyWeight ='body weight',\n  bosuBall ='bosu ball',\n  cable = 'cable',\n  dumbbell = 'dumbbell',\n  ellipticalMachine = 'elliptical machine',\n  ezBarbel = 'ez barbell',\n  hammer = 'hammer',\n  kettlebell = 'kettlebell',\n  leverageMachine = 'leverage machine',\n  medicineBall = 'medicine ball',\n  olympicBarbel = 'olympic barbell',\n  resistanceBand = 'resistance band',\n  roller = 'roller',\n  rope = 'rope',\n  skiergMachine = 'skierg machine',\n  sledMachine = 'sled machine',\n  smithMachine = 'smith machine',\n  stabilityBall = 'stability ball',\n  stationaryBike = 'stationary bike',\n  stepmillMachine = 'stepmill machine',\n  tire = 'tire',\n  trapBar = 'trap bar',\n  upperBodyEergometer = 'upper body ergometer',\n  weighted = 'weighted',\n  wheelRoller = 'wheel roller'\n }\n\nexport interface Exercise {\n  bodyPart: string;\n  equipment: string;\n  gifUrl: string;\n  id: string;\n  name: string;\n  target: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExerciseDBService {\n  url = 'https://exercisedb.p.rapidapi.com/exercises';\n  headers = new HttpHeaders({\n    'x-rapidapi-key': 'faa32cc9f5msh7a6aced2f4a8cbcp110446jsn70a489d7ecbd',\n    'x-rapidapi-host': 'exercisedb.p.rapidapi.com'\n  });\n  constructor(private http: HttpClient, private loadingCtr: LoadingController) {}\n\n  getData(type, target?): Observable<any> {\n    if(typeof target === 'undefined') {\n      return this.http.get<any>(`${this.url}${SearchTypes[type]}`, {headers: this.headers});\n    }\n      return this.http.get<any>(`${this.url}${SearchTypes[type]}/${target}`, {headers: this.headers});\n    }\n  getExerciseByID(id): Observable<any> {\n    return this.http.get<any>(`${this.url}/exercise/${id}`, {headers: this.headers});\n  }\n}\n"],"names":["Component","Input","ExerciseDBService","ActivatedRoute","Router","LoadingController","ModalController","NavController","Location","DatabaseService","FormBuilder","FormControl","Validators","ExerciseDetailPage","constructor","exerciseDBService","loadingController","location","database","route","router","nav","formbuilder","modalController","setArray","displayForm","queryParams","subscribe","params","getCurrentNavigation","console","log","extras","state","trainingPlanId","newSet","generateSetFormgroup","abbortSet","setForm","group","setnumber","length","repetition","required","pattern","weight","addSet","data","getRawValue","push","ngOnInit","idTmp","snapshot","paramMap","get","id","getTrainingsPlanById","res","trainingPlan","error","getExercise","addToTrainingPlan","array","exercises","exerciseId","name","exercise","sets","updatePlan","description","period","uid","updateTrainingPlan","dismiss","getExerciseByNumericId","result","selector","template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}