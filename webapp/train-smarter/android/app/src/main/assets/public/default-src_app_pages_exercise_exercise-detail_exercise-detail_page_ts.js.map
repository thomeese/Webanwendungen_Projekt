{"version":3,"file":"default-src_app_pages_exercise_exercise-detail_exercise-detail_page_ts.js","mappings":"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","sources":["./src/app/pages/exercise/exercise-detail/exercise-detail.page.ts","./src/app/services/exercise-db.service.ts"],"sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\r\nimport {ExerciseDBService} from '../../../services/exercise-db.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {trigger, transition, animate, style, state} from '@angular/animations';\r\nimport {LoadingController, ModalController, NavController} from '@ionic/angular';\r\nimport {Location} from '@angular/common';\r\nimport {DatabaseService} from '../../../services/database.service';\r\nimport {waitForAsync} from '@angular/core/testing';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-exercise-detail',\r\n  templateUrl: './exercise-detail.page.html',\r\n  styleUrls: ['./exercise-detail.page.scss'],\r\n})\r\n//getExercise momentan nicht eingebunden\r\nexport class ExerciseDetailPage implements OnInit {\r\n\r\n  id; //exerciseId\r\n  exercise;\r\n  trainingPlan;\r\n  setArray;\r\n  showSetForm;\r\n  edit = false;\r\n  addToPlan = false;\r\n\r\n  constructor(private exerciseDBService: ExerciseDBService,\r\n              private loadingController: LoadingController,\r\n              private location: Location,\r\n              private database: DatabaseService,\r\n              private route: ActivatedRoute,\r\n              private router: Router,\r\n              private nav: NavController,\r\n              private formbuilder: FormBuilder,\r\n              private modalController: ModalController) {\r\n    this.route.queryParams.subscribe(params => {\r\n      if (this.router.getCurrentNavigation() !== null) {\r\n        console.log('Navigation on');\r\n        console.log(this.router.getCurrentNavigation());\r\n        if (this.router.getCurrentNavigation().extras.state) {\r\n          this.trainingPlan = this.router.getCurrentNavigation().extras.state.trainingPlan;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    console.log(this.edit);\r\n    console.log(this.addToPlan);\r\n    console.log(this.id);\r\n    try {\r\n      if (this.id === 'undefined' || this.id === null) {\r\n        this.id = this.route.snapshot.paramMap.get('id'); //exerciseId setzten\r\n      }\r\n      this.getExercise();\r\n    } catch\r\n      (error) {\r\n      console.log(error);\r\n    }\r\n    if(this.addToPlan){\r\n      this.setArray = [];\r\n    }\r\n  }\r\n\r\n  async updateExerciseinTrainingPlan() {\r\n    const array = this.trainingPlan.exercises;\r\n    array.forEach(item => {\r\n      //Exercise im Array finden\r\n      if (item.exerciseId === this.exercise.exerciseId) {\r\n        //Bearbeitete Sets setzen\r\n        item.sets = this.setArray;\r\n      }\r\n    });\r\n    //Attribute im Plan setzten\r\n    const updatePlan = {\r\n      id: this.trainingPlan.trainingPlanId,\r\n      name: this.trainingPlan.name,\r\n      description: this.trainingPlan.description,\r\n      period: this.trainingPlan.period,\r\n      uid: this.trainingPlan.uid,\r\n      exercises: array\r\n    };\r\n    //Plan in der Datenbank updaten\r\n    await this.database.updateTrainingPlan(updatePlan);\r\n    //Modal schliessen\r\n    await this.modalController.dismiss();\r\n  }\r\n\r\n  async addToTrainingPlan() {\r\n    console.log('Vorher');\r\n    let array;\r\n    array = this.trainingPlan.exercises;\r\n    if (!array) {\r\n      array = [];\r\n    }\r\n    //Exercise dem Exercise-Array hinzufuegen\r\n    array.push({\r\n      exerciseId: this.id,\r\n      name: this.exercise.name,\r\n      sets: this.setArray\r\n    });\r\n    //Attribute im Plan setzten\r\n    const updatePlan = {\r\n      id: this.trainingPlan.trainingPlanId,\r\n      name: this.trainingPlan.name,\r\n      description: this.trainingPlan.description,\r\n      period: this.trainingPlan.period,\r\n      uid: this.trainingPlan.uid,\r\n      exercises: array\r\n    };\r\n    //Plan in der Datenbank updaten\r\n    await this.database.updateTrainingPlan(updatePlan);\r\n    //Modal schliessen\r\n    await this.modalController.dismiss();\r\n  }\r\n\r\n\r\n  async getExercise() {\r\n    //exercise-Daten laden\r\n    await this.database.getExerciseByNumericId(this.id).subscribe(result => {\r\n      this.exercise = result[0];\r\n      console.log(this.exercise);\r\n    });\r\n  }\r\n\r\n  updateSetArray(newSetArray: string) {\r\n    //Formdaten setzen\r\n    this.setArray = JSON.parse(newSetArray);\r\n  }\r\n\r\n  async saveChanges() {\r\n    console.log('Vorher');\r\n    for (const selectedExercise of this.trainingPlan.exercises) {\r\n      if (selectedExercise.exerciseId === this.exercise.numericId) {\r\n        selectedExercise.sets = this.setArray;\r\n      }\r\n    }\r\n    await this.database.updateTrainingPlan(this.trainingPlan);\r\n    //Modal schliessen\r\n    await this.modalController.dismiss();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {LoadingController} from '@ionic/angular';\r\nimport {Observable} from 'rxjs';\r\n\r\n//Exercise Enum\r\nexport enum SearchTypesToString {\r\n  exercisesList = 'Alle Uebungen',\r\n  bodyPart = 'Nach Körperteil',\r\n  targetMuscle = 'Nach Muskelgruppe',\r\n  exerciseByID = 'Nach ÜbungsID',\r\n  equipment = 'Nach Equipment'\r\n}\r\nexport enum SearchTypes {\r\n  exercise = '/exercise',\r\n  exercisesList = '',\r\n  bodyPart = '/bodyPart',\r\n  bodyPartList = '/bodyPartList',\r\n  exerciseByID = '/exercise',\r\n  targetMuscle = '/target',\r\n  targetMuscleList = '/targetList',\r\n  equipment = '/equipment',\r\n  equipmentList = '/equipmentList'\r\n}\r\n\r\nexport enum MusclesToString {\r\n  abductors = 'Abduktoren',\r\n  abs = 'Bauchmuskeln',\r\n  adductors = 'Adduktoren',\r\n  biceps = 'Biceps',\r\n  calves = 'Waden',\r\n  cardiovascularSystem = 'Blutkreislauf',\r\n  delts = 'Deltas',\r\n  forearms = 'Unterarm',\r\n  glutes = 'Gluteus',\r\n  hamstrings = 'Oberschenkelmuskulatur',\r\n  lats = 'Latissimus',\r\n  levatorScapulae = 'Schulterblätter',\r\n  pectorals = 'Brustmuskeln',\r\n  quads = 'Quads',\r\n  serratusAnterior = 'vorderer Sägemuskel',\r\n  spine = 'Wirbelsäule',\r\n  traps = 'Trapezmuskel',\r\n  triceps = 'Triceps',\r\n  upperBack = 'Oberer Rücken'\r\n}\r\n\r\nexport enum Muscles {\r\n  abductors = 'abductors',\r\n  abs = 'abs',\r\n  adductors = 'adductors',\r\n  biceps = 'biceps',\r\n  calves = 'calves',\r\n  cardiovascularSystem = 'cardiovascular system',\r\n  delts = 'delts',\r\n  forearms = 'forearms',\r\n  glutes = 'glutes',\r\n  hamstrings = 'hamstrings',\r\n  lats = 'lats',\r\n  levatorScapulae = 'levator scapulae',\r\n  pectorals = 'pectorals',\r\n  quads = 'quads',\r\n  serratusAnterior = 'serratus anterior',\r\n  spine = 'spine',\r\n  traps = 'traps',\r\n  triceps = 'triceps',\r\n  upperBack = 'upper back'\r\n}\r\n\r\nexport enum BodyPartsToString {\r\n  back = 'Rücken',\r\n  cardio = 'Cardio',\r\n  chest = 'Brust',\r\n  lowerArms = 'Unterarm',\r\n  lowerLegs = 'Untere Beine',\r\n  neck = 'Nacken',\r\n  shoulders = 'Schultern',\r\n  upperArms = 'Obere Arme',\r\n  upperLegs = 'Oberer Beine',\r\n  waist = 'Taille'\r\n}\r\n\r\nexport enum BodyParts {\r\n  back = 'back',\r\n  cardio = 'cardio',\r\n  chest = 'chest',\r\n  lowerArms = 'lower arms',\r\n  lowerLegs = 'lower legs',\r\n  neck = 'neck',\r\n  shoulders = 'shoulders',\r\n  upperArms = 'upper arms',\r\n  upperLegs = 'upper legs',\r\n  waist = 'waist'\r\n}\r\n\r\nexport enum EquipmentToString {\r\n  assisted = 'unterstützt',\r\n  band = 'Band',\r\n  barbell = 'Langhantel',\r\n  bodyWeight ='body weight',\r\n  bosuBall ='BosuBall',\r\n  cable = 'Kabel',\r\n  dumbbell = 'Kurzhantel',\r\n  ellipticalMachine = 'elliptische Maschine',\r\n  ezBarbel = 'EZ Hantel',\r\n  hammer = 'Hammer',\r\n  kettlebell = 'Kettlebell',\r\n  leverageMachine = 'Hebelmaschine',\r\n  medicineBall = 'Medizinball',\r\n  olympicBarbel = 'olympische Langhantel',\r\n  resistanceBand = 'Widerstandsband',\r\n  roller = 'Rolle',\r\n  rope = 'Seil',\r\n  skiergMachine = 'SkiErg Maschine',\r\n  sledMachine = 'Sled Maschine',\r\n  smithMachine = 'Multipresse',\r\n  stabilityBall = 'Stabilitätsball',\r\n  stationaryBike = 'Fahrrad',\r\n  stepmillMachine = 'Stepmill Maschine',\r\n  tire = 'Reifen',\r\n  trapBar = 'Trap Bar',\r\n  upperBodyEergometer = 'Oberkörper-Ergometer',\r\n  weighted = 'gewichtet',\r\n  wheelRoller = 'AB Roller'\r\n}\r\n\r\nexport enum Equipment {\r\n  assisted = 'assisted',\r\n  band = 'band',\r\n  barbell = 'barbell',\r\n  bodyWeight ='body weight',\r\n  bosuBall ='bosu ball',\r\n  cable = 'cable',\r\n  dumbbell = 'dumbbell',\r\n  ellipticalMachine = 'elliptical machine',\r\n  ezBarbel = 'ez barbell',\r\n  hammer = 'hammer',\r\n  kettlebell = 'kettlebell',\r\n  leverageMachine = 'leverage machine',\r\n  medicineBall = 'medicine ball',\r\n  olympicBarbel = 'olympic barbell',\r\n  resistanceBand = 'resistance band',\r\n  roller = 'roller',\r\n  rope = 'rope',\r\n  skiergMachine = 'skierg machine',\r\n  sledMachine = 'sled machine',\r\n  smithMachine = 'smith machine',\r\n  stabilityBall = 'stability ball',\r\n  stationaryBike = 'stationary bike',\r\n  stepmillMachine = 'stepmill machine',\r\n  tire = 'tire',\r\n  trapBar = 'trap bar',\r\n  upperBodyEergometer = 'upper body ergometer',\r\n  weighted = 'weighted',\r\n  wheelRoller = 'wheel roller'\r\n }\r\n\r\nexport interface Exercise {\r\n  bodyPart: string;\r\n  equipment: string;\r\n  gifUrl: string;\r\n  id: string;\r\n  name: string;\r\n  target: string;\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExerciseDBService {\r\n  url = 'https://exercisedb.p.rapidapi.com/exercises';\r\n  headers = new HttpHeaders({\r\n    'x-rapidapi-key': 'faa32cc9f5msh7a6aced2f4a8cbcp110446jsn70a489d7ecbd',\r\n    'x-rapidapi-host': 'exercisedb.p.rapidapi.com'\r\n  });\r\n  constructor(private http: HttpClient, private loadingCtr: LoadingController) {}\r\n\r\n  getData(type, target?): Observable<any> {\r\n    if(typeof target === 'undefined') {\r\n      return this.http.get<any>(`${this.url}${SearchTypes[type]}`, {headers: this.headers});\r\n    }\r\n      return this.http.get<any>(`${this.url}${SearchTypes[type]}/${target}`, {headers: this.headers});\r\n    }\r\n  getExerciseByID(id): Observable<any> {\r\n    return this.http.get<any>(`${this.url}/exercise/${id}`, {headers: this.headers});\r\n  }\r\n}\r\n"],"names":["Component","ExerciseDBService","ActivatedRoute","Router","LoadingController","ModalController","NavController","Location","DatabaseService","FormBuilder","ExerciseDetailPage","constructor","exerciseDBService","loadingController","location","database","route","router","nav","formbuilder","modalController","queryParams","subscribe","params","getCurrentNavigation","console","log","extras","state","trainingPlan","ngOnInit","edit","addToPlan","id","snapshot","paramMap","get","getExercise","error","setArray","updateExerciseinTrainingPlan","array","exercises","forEach","item","exerciseId","exercise","sets","updatePlan","trainingPlanId","name","description","period","uid","updateTrainingPlan","dismiss","addToTrainingPlan","push","getExerciseByNumericId","result","updateSetArray","newSetArray","JSON","parse","saveChanges","selectedExercise","numericId","selector","template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}